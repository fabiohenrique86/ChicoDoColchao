@using ChicoDoColchao.Dao;
@using Newtonsoft.Json;

@model PedidoDao

@{
    ViewBag.Title = "Pedido - Tirar";

    UsuarioDao usuarioDao = null;
    if (Request.Cookies.Get("ChicoDoColchao_Usuario") != null)
    {
        usuarioDao = JsonConvert.DeserializeObject<UsuarioDao>(Request.Cookies.Get("ChicoDoColchao_Usuario").Value);
    }
}
@section styles
{
    <style type="text/css">
        .table.dataTable tbody td {
            font-size: 13px;
        }

        .link_preco {
            cursor: pointer;
        }

        #tbProdutoPreco tbody tr {
            cursor: pointer;
        }
    </style>
}
@section scripts
{
    <script type="text/javascript">

        function modalPreco(produtoId, produtoPreco) {

            $.getJSON("/Produto/Listar", { ProdutoID: produtoId }, function (data) {

                $("#lblNumeroProduto").text(data[0].Numero);

                var tbLojaProduto = $("#tbLojaProduto").DataTable();

                tbLojaProduto.clear();
                tbLojaProduto.rows.add(data[0].LojaProdutoDao).draw();

                var precoAtacado = Globalize.format(data[0].PrecoAtacado, "n2");
                var precoAVista = Globalize.format(data[0].PrecoAVista, "n2");
                var precoAte10 = Globalize.format(data[0].PrecoAte10, "n2");
                var precoNormal = Globalize.format(data[0].PrecoNormal, "n2");

                var produtoPrecos =
                [
                    { ProdutoID: data[0].ProdutoID, Descricao: "Atacado", Preco: precoAtacado },
                    { ProdutoID: data[0].ProdutoID, Descricao: "À Vista", Preco: precoAVista },
                    { ProdutoID: data[0].ProdutoID, Descricao: "Até 10x", Preco: precoAte10 },
                    { ProdutoID: data[0].ProdutoID, Descricao: "Preço", Preco: precoNormal },
                ];

                var tbProdutoPreco = $("#tbProdutoPreco").DataTable();

                tbProdutoPreco.clear();
                tbProdutoPreco.rows.add(produtoPrecos).draw();

                // marca a linha selecionada para o preço selecionado
                switch (produtoPreco)
                {
                    case (precoAtacado): // atacado
                        $(tbProdutoPreco.row(0).node()).addClass('selected');
                        break;
                    case (precoAVista): // à vista
                        $(tbProdutoPreco.row(1).node()).addClass('selected');
                        break;
                    case (precoAte10): // até 10x
                        $(tbProdutoPreco.row(2).node()).addClass('selected');
                        break;
                    case (precoNormal): // preço
                        $(tbProdutoPreco.row(3).node()).addClass('selected');
                        break;
                    default:
                }

                $('#modalpreco').modal('show');
            });
        }

        function calcularTotalPago() {

            var totalPago = 0;
            var tbPagamentos = $("#tbTipoPagamento").DataTable();

            if (tbPagamentos.rows().count() <= 0) {
                $("#lblTotalPago").html(Globalize.format(totalPago, "n2"));
                return;
            }

            $(".valorPago").each(function (index, element) {
                var valorPago = Globalize.parseFloat($(element).val());
                if (isNaN(valorPago)) { valorPago = 0; }
                totalPago += valorPago;
            });

            if (!isNaN(totalPago)) {
                $("#lblTotalPago").html(Globalize.format(totalPago, "n2"));
            }
        }

        function calcularTotalPedido() {

            var totalPedido = 0;
            var tbProdutos = $("#tbProduto").DataTable();

            if (tbProdutos.rows().count() <= 0) {
                $("#lblTotalPedido").html(Globalize.format(totalPedido, "n2"));
                return;
            }

            $(".quantidade").each(function (index, element)
            {
                var quantidade = $(element).val();
                var tr = $(element).parents("tr");
                var preco = Globalize.parseFloat($(tr).children().eq(4).text().trim());
                if (isNaN(preco)) {
                    preco = 0;
                }
                totalPedido += parseInt(quantidade) * preco;

                var dataEntrega = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='" + $($($(".dataEntrega")[index]).parents("tr").children().eq(5)).children().val() + "' />";
                if ($("#PedidoStatusID").val() == '@PedidoStatusDao.EPedidoStatus.RetiradoNaLoja.GetHashCode()')
                {
                    dataEntrega = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='" + $($($(".dataEntrega")[index]).parents("tr").children().eq(5)).children().val() + "' disabled='disabled' />";
                }
                tbProdutos.row(index).data().DataEntrega = dataEntrega;
                tbProdutos.row(index).data().Quantidade = "<input type='text' class='form-control quantidade text-center' min='0' onblur='calcularTotalPedido()' value='" + quantidade + "' />";
                tbProdutos.row(index).invalidate();
            });

            tbProdutos.draw();

            var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());

            if (!isNaN(totalPedido)) {
                $("#lblTotalPedido").html(Globalize.format((totalPedido - totalDesconto), "n2"));
            }
        }

        var parcelas;

        function obterParcelas(data)
        {
            var p = "<select name='ParcelaID' class='form-control parcela'>"
            p += "<option value='0'>Qtd</option>";
            $(data).each(function (i, e) {
                p += "<option value='" + e.ParcelaID + "'>" + e.Numero + "</option>";
            });
            p += '</select>';
            return p;
        }

        $(document).ready(function () {

            parcelas = obterParcelas(@Html.Raw(Json.Encode(ViewBag.ParcelaDao)));

            $("#btnAdicionarDesconto").click(function () {
                var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());
                var valorDesconto = Globalize.parseFloat($("#ValorDesconto").val());
                var totalPedido = Globalize.parseFloat($("#lblTotalPedido").text());

                if (isNaN(valorDesconto)) {
                    alert('Informe o valor do desconto');
                    return;
                }

                $("#lblTotalDesconto").text(Globalize.format((totalDesconto + valorDesconto), "n2"));
                $("#lblTotalPedido").text(Globalize.format((totalPedido - valorDesconto), "n2"));
                $("#ValorDesconto").val("");

                $('#modaldesconto').modal('hide');
            });

            $("#btnRetirarDesconto").click(function () {
                var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());
                var totalPedido = Globalize.parseFloat($("#lblTotalPedido").text());

                $("#lblTotalDesconto").text(Globalize.format(0, "n2"));
                $("#lblTotalPedido").text(Globalize.format((totalPedido + totalDesconto), "n2"));

                $("#ValorDesconto").val("");
                $('#modaldesconto').modal('hide');
            });

            // change da data de entrega do grid de produtos
            $(document).on('change', '.dataEntrega', function(e)
            {
                var index = $(this).closest('tr').index();

                $("#tbProduto").DataTable().row(index).data().DataEntrega = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='" + $(this).val() + "' />";
                $("#tbProduto").DataTable().row(index).invalidate();

                $(".dataEntrega").datepicker({
                    dateFormat: 'dd/mm/yy',
                    dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                    dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
                    dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'],
                    monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                    monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                    nextText: 'Próximo',
                    prevText: 'Anterior',
                    changeMonth: true,
                    changeYear: true
                });

            });

            // change do status do pedido
            $("#PedidoStatusID").change(function () {
                var pedidoStatusId = $(this).val();
                if (pedidoStatusId == '@PedidoStatusDao.EPedidoStatus.RetiradoNaLoja.GetHashCode()') {
                    $(".dataEntrega").attr("disabled", "disabled");
                    $(".dataEntrega").val("");
                    //$("#NomeCarreto").attr("disabled", "disabled");
                    //$("#NomeCarreto").val("");
                    $("#ValorFrete").attr("disabled", "disabled");
                    $("#ValorFrete").val("");
                }
                else {
                    $(".dataEntrega").removeAttr("disabled");
                    //$("#NomeCarreto").removeAttr("disabled");
                    $("#ValorFrete").removeAttr("disabled");
                }
            });

            $("#TipoPagamentoID").change(function () {

                var tipoPagamentoID = parseInt($(this).val());
                var descricaoTipoPagamento = $("#TipoPagamentoID option:selected").text();
                var tipoPagamentoAdicionadoAoPedido = false;

                if (isNaN(tipoPagamentoID)) { return; }

                // verifica se o tipo de pagamento selecionado já existe no pedido
                tbTipoPagamento.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    if (data.TipoPagamentoID == tipoPagamentoID) {
                        tipoPagamentoAdicionadoAoPedido = true;
                    }
                });

                if (!tipoPagamentoAdicionadoAoPedido) {

                    var cv = false;
                    if (descricaoTipoPagamento.indexOf("Cartão") == 0 || descricaoTipoPagamento.indexOf("cartão") == 0 || descricaoTipoPagamento.indexOf("cartao") == 0 || descricaoTipoPagamento.indexOf("Cartao") == 0)
                    {
                        cv = true;
                    }

                    // adiciona pagamento
                    tbTipoPagamento.rows.add([
                    {
                        "TipoPagamentoID": tipoPagamentoID,
                        "Descricao": $(this).find(":selected").text(),
                        "ParcelaID": tipoPagamentoID == '@TipoPagamentoDao.ETipoPagamento.Dinheiro.GetHashCode()' ? "" : parcelas,
                        "CV": cv == true ? "<input name='CV' type='text' class='form-control cv text-right' />" : "",
                        "ValorPago": "<input name='ValorPago' type='text' class='form-control valorPago valor text-right' onblur='calcularTotalPago()' />",
                        "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Tipo Pagamento' style='cursor: pointer; vertical-align: bottom'></i>"
                    }]).draw();

                    $(".valor").mask('000.000.000,00', { reverse: true });
                    $(".cv").mask('999999');
                }
            });

            $("#txtCliente").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("/Cliente/ListarAutocomplete", { term: request.term }, function (data, status, xhr) {

                        // se não houver cliente cadastrado, retorna mensagem ao usuário
                        if (data == null || data.length <= 0) { data.push({ ClienteID: 0, Nome: "Cliente não cadastrado" }); }

                        response($.map(data, function (cliente) {
                            var nome = cliente.Nome;

                            if (nome == null || nome == "") {
                                nome = cliente.NomeFantasia;
                            }

                            return { label: nome, value: cliente.ClienteID }
                        }));
                    });
                },
                select: function (event, ui) {

                    // apaga a pesquisa do cliente selecionado
                    if (ui.item.label == "Cliente não cadastrado") {
                        ui.item.label = "";
                        ui.item.value = "";
                        return;
                    }

                    $("#ClienteID").val(ui.item.value);

                    ui.item.label = ui.item.label;
                    ui.item.value = ui.item.label;
                },
                change: function (event, ui) {
                    if (ui == null || ui.item == undefined || ui.item == null) {
                        $("#ClienteID").val("");
                    }
                }
            });

            $("#txtProduto").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("/Produto/ListarAutocomplete", { term: request.term }, function (data, status, xhr) {
                        response($.map(data, function (produto) {

                            // verifica se o produto tem algum preço cadastrado
                            if (produto.Preco == undefined || produto.Preco <= 0) { return { label: "Produto " + produto.Numero + " não tem preço cadastrado", value: 0 }; }

                            return { label: produto.Numero + ' | ' + produto.Descricao + ' | ' + produto.MedidaDao.Descricao + ' | ' + Globalize.format(produto.PrecoNormal, "n2"), value: produto.ProdutoID }
                        }));
                    });
                },
                select: function (event, ui) {

                    var produto = ui.item.label.split("|");
                    var produtoAdicionadoAoPedido = false;
                    var idx = 0;

                    // verifica se o produto selecionado já existe no pedido
                    tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        var data = this.data();
                        if (data.ProdutoID == ui.item.value) {
                            produtoAdicionadoAoPedido = true;
                        }
                    });

                    if (produtoAdicionadoAoPedido) {
                        ui.item.label = "";
                        ui.item.value = "";
                        alert('Produto ' + produto[0].trim() + ' já adicionado ao pedido.');
                        return;
                    }

                    var dataEntrega = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='' />";
                    if ($("#PedidoStatusID").val() == '@PedidoStatusDao.EPedidoStatus.RetiradoNaLoja.GetHashCode()')
                    {
                        dataEntrega = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='' disabled='disabled' />";
                    }

                    // adiciona o produto ao pedido
                    tbProduto.rows.add([
                    {
                        "ProdutoID": ui.item.value,
                        "Numero": produto[0].trim(),
                        "Descricao": produto[1].trim(),
                        "MedidaDao": { "Descricao": produto[2].trim() },
                        "Quantidade": "<input type='text' class='form-control quantidade text-center' min='0' onblur='calcularTotalPedido()' value='1' />",
                        "Preco": "<span class='preco'>" + Globalize.format(parseFloat(produto[3].trim().replace(".", "").replace(",", ".")), "n2") + "</span>",
                        "DataEntrega": dataEntrega,
                        "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Produto' style='cursor: pointer; vertical-align: middle'></i>"
                    }]).draw();

                    // atualiza o total do pedido
                    calcularTotalPedido();

                    // apaga a pesquisa do produto selecionado
                    ui.item.label = "";
                    ui.item.value = "";
                }
            });

            var tbProduto = $("#tbProduto").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "Mostrar _MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Mostrando página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)"
                },
                "rowCallback": function (row, data, index)
                {
                    $(".quantidade").mask('000');
                    $(".dataEntrega").datepicker({
                        dateFormat: 'dd/mm/yy',
                        dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                        dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
                        dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'],
                        monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                        monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                        nextText: 'Próximo',
                        prevText: 'Anterior',
                        changeMonth: true,
                        changeYear: true
                    });
                },
                "columns":
                [
                    {
                        "data": function (data, type, row)
                        {
                            return "<a href='#' onclick='modalPreco(" + data["ProdutoID"] + ",\"" + $(data.Preco).text().trim() + "\")'>" + data["Numero"] + "</a>";
                        },
                        "className": "text-center"
                    },
                    { "data": "Descricao", "className": "text-left" },
                    { "data": "MedidaDao.Descricao", "className": "text-center" },
                    { "data": "Quantidade", "className": "text-center" },
                    { "data": "Preco", "className": "text-center" },
                    { "data": "DataEntrega", "className": "text-center" },
                    { "data": "Acao", "className": "text-center" }
                ]
            });

            var tbTipoPagamento = $("#tbTipoPagamento").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "Mostrar _MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Mostrando página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)"
                },
                "columns":
                [
                    { "data": "TipoPagamentoID", "className": "text-left", "visible": false },
                    { "data": "Descricao", "className": "text-left" },
                    { "data": "ParcelaID", "className": "text-center" },
                    { "data": "CV", "className": "text-center" },
                    { "data": "ValorPago", "className": "text-center" },
                    { "data": "Acao", "className": "text-center" }

                ]
            });

            var tbLojaProduto = $("#tbLojaProduto").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "_MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)",
                    "sSearch": "Pesquisar",
                    "oPaginate": { "sNext": "Próximo", "sPrevious": "Anterior", "sFirst": "Primeiro", "sLast": "Último" }
                },
                "columns":
                [
                    { "data": "LojaDao.NomeFantasia", "className": "text-center" },
                    { "data": "Quantidade", "className": "text-center" }
                ]
            });

            var tbProdutoPreco = $("#tbProdutoPreco").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "_MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)",
                    "sSearch": "Pesquisar",
                    "oPaginate": { "sNext": "Próximo", "sPrevious": "Anterior", "sFirst": "Primeiro", "sLast": "Último" }
                },
                "columns":
                [
                    { "data": "ProdutoID", "visible": false },
                    { "data": "Descricao", "className": "text-center" },
                    { "data": "Preco", "className": "text-center" }
                ]
            });

            // botão excluir produto do pedido
            $('#tbProduto tbody').on('click', 'i.glyphicon-remove', function () {
                if (confirm("Deseja realmente excluir produto do pedido?")) {
                    tbProduto.row($(this).parents('tr')).remove().draw();
                    calcularTotalPedido();
                }
            });

            // botão excluir tipo pagamento do pedido
            $('#tbTipoPagamento tbody').on('click', 'i.glyphicon-remove', function () {
                if (confirm("Deseja realmente excluir tipo de pagamento do pedido?")) {
                    tbTipoPagamento.row($(this).parents('tr')).remove().draw();
                    calcularTotalPago();
                }
            });

            // altera o preço do produto
            $('#tbProdutoPreco tbody').on('click', 'tr', function () {
                var dataProdutoPreco = tbProdutoPreco.row(this).data();
                var row = $(this);
                if (!row.hasClass('selected')) { row.addClass('selected').siblings().removeClass('selected'); }
                tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var dataProduto = this.data();
                    if (dataProduto.ProdutoID == dataProdutoPreco.ProdutoID)
                    {
                        dataProduto.Preco = "<span class='preco'>" + dataProdutoPreco.Preco + "</span>";
                        this.invalidate();
                    }
                });
                tbProduto.draw();
                calcularTotalPedido();
                $('#modalpreco').modal('hide');
            });

            $("#btnCadastrarPedido").click(function () {

                var pedidoDao = {};
                var pedidoProdutoDao = [];
                var pedidoTipoPagamento = [];

                pedidoDao.ConsultorDao = [];
                pedidoDao.ConsultorDao.push({ FuncionarioID: $("#FuncionarioID option:selected").val() });
                pedidoDao.ClienteDao = [];
                pedidoDao.ClienteDao.push({ ClienteID: $("#ClienteID").val() });

                pedidoDao.LojaDao = [];
                pedidoDao.LojaDao.push({ LojaID: $("#LojaOrigemID option:selected").val() });

                pedidoDao.LojaSaidaDao = [];
                pedidoDao.LojaSaidaDao.push({ LojaID: $("#LojaID option:selected").val() });
                pedidoDao.PedidoStatusDao = [];
                pedidoDao.PedidoStatusDao.push({ PedidoStatusID: $("#PedidoStatusID option:selected").val() });

                pedidoDao.TipoPagamentoFreteID = $("[name='rdbTaxaServico']:checked").val();
                pedidoDao.ValorFrete = $("#ValorFrete").val().trim() != "" ? $("#ValorFrete").val() : 0;

                pedidoDao.Observacao = $("#Observacao").val();
                pedidoDao.Desconto = $("#lblTotalDesconto").text();
                pedidoDao.UsuarioPedidoDao = { UsuarioID: '@usuarioDao.UsuarioID' };

                // produtos
                tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    var dtEntrega = $($($(".dataEntrega")[rowIdx]).parents("tr").children().eq(5)).children().val();
                    pedidoProdutoDao.push
                    ({
                        "ProdutoID": data.ProdutoID,
                        "ProdutoDao.Descricao": data.Descricao,
                        "Quantidade": Globalize.parseInt($($($(".quantidade")[rowIdx]).parents("tr").children().eq(3)).children().val()),
                        "Preco": $($($(".preco")[rowIdx]).parents("tr").children().eq(4)).text(),
                        "DataEntrega": dtEntrega,
                        "UsuarioEntregaDao.UsuarioID": dtEntrega == '' ? 0 : '@usuarioDao.UsuarioID'
                    });
                });

                pedidoDao.PedidoProdutoDao = pedidoProdutoDao;

                // pagamentos
                tbTipoPagamento.rows().every(function (rowIdx, tableLoop, rowLoop) {

                    var data = this.data();
                    var parcelaId = 1;
                    var valorPago = $($($(".valorPago")[rowIdx]).parents("tr").children().eq(3)).children().val();
                    var cv = null;

                    // se não for dinheiro, obtém a parcela e cv
                    if (data.TipoPagamentoID != '@TipoPagamentoDao.ETipoPagamento.Dinheiro.GetHashCode()') {
                        parcelaId = parseInt($($($(".valorPago")[rowIdx]).parents("tr").children().eq(1)).children().val());
                        cv = $($($(".valorPago")[rowIdx]).parents("tr").children().eq(2)).children().val();
                    }

                    pedidoTipoPagamento.push
                    ({
                        "TipoPagamentoDao.TipoPagamentoID": data.TipoPagamentoID,
                        "ParcelaDao.ParcelaID": parcelaId,
                        "ValorPago": valorPago,
                        "CV": cv
                    });
                });

                pedidoDao.PedidoTipoPagamentoDao = pedidoTipoPagamento;

                // verifica se existe um orçamento associado ao pedido
                if ('@ViewBag.OrcamentoDao' != '')
                {
                    var orcamentoDao = @Html.Raw(Json.Encode(ViewBag.OrcamentoDao));

                    pedidoDao.OrcamentoDao = [];
                    pedidoDao.OrcamentoDao.push({ OrcamentoID: orcamentoDao.OrcamentoID });
                }

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: "/Pedido/Incluir",
                    data: { pedidoDao: pedidoDao },
                    success: function (data) {

                        if (!data.Sucesso) {
                            alert(data.Mensagem);
                            return;
                        }

                        $("#PedidoForm")[0].reset();
                        tbProduto.clear().draw();
                        tbTipoPagamento.clear().draw();
                        $("#ValorFrete").val("");
                        $("#lblTotalPedido").html("0,00");
                        $("#lblTotalPago").html("0,00");
                        $("#lblTotalDesconto").html("0,00");
                        $("#ClienteID").val("");
                        $("#ValorFrete").removeAttr("disabled");

                        alert(data.Mensagem);
                    }
                });
            });

            if ('@ViewBag.OrcamentoDao' != '')
            {
                var orcamentoDao = @Html.Raw(Json.Encode(ViewBag.OrcamentoDao));

                //$("#txtCliente").val(orcamentoDao.ClienteDao.Nome);
                //$("#ClienteID").val(orcamentoDao.ClienteDao.ClienteID);
                $("#FuncionarioID").val(orcamentoDao.ConsultorDao[0].FuncionarioID);
                $("#LojaOrigemID").val(orcamentoDao.LojaDao[0].LojaID);

                $("#lblTotalDesconto").text(Globalize.format(orcamentoDao.Desconto, "n2"));

                $(orcamentoDao.OrcamentoProdutoDao).each(function (index, element) {

                    // adiciona o produto ao pedido
                    tbProduto.rows.add([
                    {
                        "ProdutoID": element.ProdutoID,
                        "Numero": element.ProdutoDao.Numero,
                        "Descricao": element.ProdutoDao.Descricao,
                        "MedidaDao": { "Descricao": element.ProdutoDao.MedidaDao.Descricao },
                        "Quantidade": "<input type='text' class='form-control quantidade text-center' min='0' onblur='calcularTotalPedido()' value='" + element.Quantidade + "' />",
                        "Preco": "<span class='preco'>" + Globalize.format(element.Preco, "n2") + "</span>",
                        "DataEntrega": "<input type='text' class='form-control data datepicker dataEntrega text-center' value='' />",
                        "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Produto' style='cursor: pointer; vertical-align: middle'></i>"
                    }]).draw();
                });

                // atualiza o total do pedido
                calcularTotalPedido();
            }

        });
    </script>
}
<div class="container">
    <h2><i class="glyphicon glyphicon-ok" style="color: #0f3456" title="Pedido"></i> Tirar Pedido</h2>
    <hr />
    <form id="PedidoForm" name="PedidoForm">
        <div class="row">
            <div class="col-lg-4">
                <div class="form-group">
                    @Html.DropDownListFor(x => x.ConsultorDao.FirstOrDefault().FuncionarioID, new SelectList(Model.ConsultorDao, "FuncionarioID", "Nome"), "Consultor", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-xs-10 col-lg-10">
                            <input id="txtCliente" name="txtCliente" type="text" class="form-control" placeholder="CPF/CNPJ do cliente (Mínimo de 3 letras)" />
                            <input type="hidden" name="ClienteID" id="ClienteID" />
                        </div>
                        <div class="col-xs-2 col-lg-2">
                            @{
                                if (ViewBag.OrcamentoDao != null)
                                {
                                    <a href="@Url.Action("Cadastro", "Cliente", new { @nomeCliente = ViewBag.OrcamentoDao.NomeCliente, @telefoneCliente = ViewBag.OrcamentoDao.TelefoneCliente })" target="_blank"><i class="glyphicon glyphicon-plus" title="Cadastrar cliente" style="vertical-align: bottom"></i></a>
                                }
                                else
                                {
                                    <a href="@Url.Action("Cadastro", "Cliente")" target="_blank"><i class="glyphicon glyphicon-plus" title="Cadastrar cliente" style="vertical-align: bottom"></i></a>
                                }
                            }
                            
                        </div>
                    </div>
                </div>
                @{
                    if (ViewBag.OrcamentoDao != null)
                    {
                        <div class="form-group">
                            <span style="font-size: 11px; font-style: italic; color: goldenrod">Cliente @ViewBag.OrcamentoDao.NomeCliente vindo do Orçamento @ViewBag.OrcamentoDao.OrcamentoID. Cadastre-o para tirar o Pedido</span>
                        </div>
                    }
                }
                <div class="form-group">
                    @Html.DropDownListFor(x => x.LojaDao.FirstOrDefault().LojaID, new SelectList(Model.LojaDao, "LojaID", "NomeFantasia"), "Loja de origem dos produtos", new { @class = "form-control", @id = "LojaOrigemID" })
                </div>
                <div class="form-group">
                    @Html.DropDownListFor(x => x.LojaSaidaDao.FirstOrDefault().LojaID, new SelectList(Model.LojaSaidaDao, "LojaID", "NomeFantasia"), "Loja de saída dos produtos", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.DropDownListFor(x => x.PedidoStatusDao.FirstOrDefault().PedidoStatusID, new SelectList(Model.PedidoStatusDao, "PedidoStatusID", "Descricao"), "Status do pedido", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    Taxa de Serviço:
                </div>
                <div class="form-group">
                    <label class="radio-inline"><input type="radio" name="rdbTaxaServico" value="@PedidoDao.ETipoPagamentoFrete.NaoCobrado.GetHashCode()">Não Cobrar</label>
                    <label class="radio-inline"><input type="radio" name="rdbTaxaServico" value="@PedidoDao.ETipoPagamentoFrete.Cartao1x.GetHashCode()">Cartão 1x</label>
                    <label class="radio-inline"><input type="radio" name="rdbTaxaServico" value="@PedidoDao.ETipoPagamentoFrete.Dinheiro.GetHashCode()">Dinheiro</label>
                    <label class="radio-inline"><input type="radio" name="rdbTaxaServico" value="@PedidoDao.ETipoPagamentoFrete.Cheque.GetHashCode()">Cheque</label>
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(x => x.ValorFrete, new { @class = "form-control valor text-right", @placeholder = "Taxa de Serviço" })
                </div>
            </div>
            <div class="col-lg-8">
                <label style="font-size: 18px; margin-bottom: 10px; font-weight: normal">Produtos</label>
                <input id="txtProduto" name="txtProduto" type="text" class="form-control" placeholder="Produtos (Mínimo de 3 letras)" />
                <div class="table-responsive">
                    <table id="tbProduto" class="table table-striped table-responsive table-condensed">
                        <thead>
                            <tr>
                                <td class="text-center" style="width: 10%"><b>Número</b></td>
                                <td class="text-left" style="width: 35%"><b>Descrição</b></td>
                                <td class="text-center" style="width: 10%"><b>Medida</b></td>
                                <td class="text-center" style="width: 10%"><b>Qtd</b></td>
                                <td class="text-center" style="width: 10%"><b>Preço</b></td>
                                <td class="text-center" style="width: 20%"><b>Data Entrega</b></td>
                                <td class="text-center" style="width: 5%"><b>Ação</b></td>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                <div style="margin-top: 10px; margin-bottom: 10px">
                    <div class="col-lg-12 text-right" style="font-size: 18px; padding: 0">Total Pedido: <span style="color: seagreen">R$ </span><label id="lblTotalPedido" style="color: seagreen">0,00</label></div>
                </div>
                <div style="margin-top: 10px; margin-bottom: 10px">
                    <div class="col-lg-12 text-right" style="font-size: 18px; padding: 0"><a href="#" data-toggle="modal" data-target="#modaldesconto">Desconto Autorizado</a>: <span style="color: darkorange">R$ </span><label id="lblTotalDesconto" style="color: darkorange; font-size: 18px">0,00</label></div>
                </div>
                <h4>Pagamentos</h4>
                @Html.DropDownListFor(x => x.TipoPagamentoDao.FirstOrDefault().TipoPagamentoID, new SelectList(Model.TipoPagamentoDao, "TipoPagamentoID", "Descricao"), "Tipo de pagamento", new { @class = "form-control" })
                <div class="table-responsive">
                    <table id="tbTipoPagamento" class="table table-striped table-responsive table-condensed">
                        <thead>
                            <tr>
                                <td></td>
                                <td class="text-left" style="width: 30%"><b>Descrição</b></td>
                                <td class="text-center" style="width: 10%"><b>Parcelas</b></td>
                                <td class="text-center" style="width: 30%"><b>Autorização</b></td>
                                <td class="text-center" style="width: 20%"><b>Valor Pago</b></td>
                                <td class="text-center" style="width: 10%"><b>Ação</b></td>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                <h4 class="text-right">Total Pago: <span style="color: seagreen">R$ </span><label id="lblTotalPago" style="color: seagreen">0,00</label></h4>
            </div>
        </div>
        <div class="form-group">
            @Html.TextAreaFor(x => x.Observacao, 5, 10, new { @class = "form-control", @placeholder = "Observação (Opcional)" })
        </div>
        <div class="form-group">
            <button id="btnCadastrarPedido" type="button" class="btn btn-success">Cadastrar</button>
            <button id="btnLista" type="button" class="btn btn-info" onclick="window.location.href='@Url.Action("Lista", "Pedido")'">Lista de Pedidos Cadastrados</button>
        </div>
    </form>
</div>
@Html.Partial("_ModalPedidoDesconto")
@Html.Partial("_ModalProdutoPreco")