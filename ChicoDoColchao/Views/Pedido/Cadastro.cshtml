@model ChicoDoColchao.Dao.PedidoDao

@{
    ViewBag.Title = "Pedido - Tirar";
}
@section styles
{
    <style type="text/css">
        .table.dataTable tbody td {
            font-size: 13px;
        }

        .link_preco {
            cursor: pointer;
        }

        #tbProdutoPreco tbody tr {
            cursor: pointer;
        }
    </style>
}
@section scripts
{
    <script type="text/javascript">

        function modalPreco(produtoId) {

            $.getJSON("/Produto/Listar", { ProdutoID: produtoId }, function (data) {

                // encontra o data-preco do produto
                var data_preco = "4";
                $("#tbProduto").DataTable().rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    if (data.ProdutoID == produtoId) {
                        data_preco = $($(".preco")[rowIdx]).attr("data-preco");
                    }
                });

                $("#lblNumeroProduto").text(data[0].Numero);

                var tbLojaProduto = $("#tbLojaProduto").DataTable();
                tbLojaProduto.clear();
                tbLojaProduto.rows.add(data[0].LojaProdutoDao).draw();

                var produtoPrecos =
                [
                    { ProdutoID: data[0].ProdutoID, Descricao: "Atacado", Preco: Globalize.format(data[0].Preco * 2.2, "n2") },
                    { ProdutoID: data[0].ProdutoID, Descricao: "À Vista", Preco: Globalize.format(data[0].Preco * 2.4, "n2") },
                    { ProdutoID: data[0].ProdutoID, Descricao: "Até 10x", Preco: Globalize.format(data[0].Preco * 2.5, "n2") },
                    { ProdutoID: data[0].ProdutoID, Descricao: "Preço", Preco: Globalize.format(data[0].Preco * 3, "n2") },
                ];

                var tbProdutoPreco = $("#tbProdutoPreco").DataTable();
                tbProdutoPreco.clear();
                tbProdutoPreco.rows.add(produtoPrecos).draw();

                // marca a linha selecionada para o preço selecionado
                if (data_preco == "1") { $(tbProdutoPreco.row(0).node()).addClass('selected'); }
                else if (data_preco == "2") { $(tbProdutoPreco.row(1).node()).addClass('selected'); }
                else if (data_preco == "3") { $(tbProdutoPreco.row(2).node()).addClass('selected'); }
                else if (data_preco == "4") { $(tbProdutoPreco.row(3).node()).addClass('selected'); }

                $('#modalpreco').modal('show');
            });
        }

        function calcularTotalPago() {

            var totalPago = 0;
            var tbPagamentos = $("#tbTipoPagamento").DataTable();

            if (tbPagamentos.rows().count() <= 0) {
                $("#lblTotalPago").html(Globalize.format(totalPago, "n2"));
                return;
            }

            $(".valorPago").each(function (index, element) {
                var valorPago = Globalize.parseFloat($(element).val());
                if (isNaN(valorPago)) { valorPago = 0; }
                //var tr = $(element).parents("tr");
                //var parcela = 1;
                // se houver parcela, obtém a quantidade de parcelas
                //if ($(tr).children().eq(1).children().val() != undefined) {
                //    parcela = Globalize.parseInt($(tr).children().eq(1).children().val());
                //}
                //if (isNaN(parcela)) { parcela = 1; }
                //totalPago += parcela * valorPago;
                totalPago += valorPago;
            });

            if (!isNaN(totalPago)) {
                $("#lblTotalPago").html(Globalize.format(totalPago, "n2"));
            }
        }

        function calcularTotalPedido() {

            var totalPedido = 0;
            var tbProdutos = $("#tbProduto").DataTable();

            if (tbProdutos.rows().count() <= 0) {
                $("#lblTotalPedido").html(Globalize.format(totalPedido, "n2"));
                return;
            }

            $(".quantidade").each(function (index, element) {
                var quantidade = $(element).val();
                var tr = $(element).parents("tr");
                var preco = Globalize.parseFloat($(tr).children().eq(4).text().trim());
                if (isNaN(preco)) {
                    preco = 0;
                }
                totalPedido += parseInt(quantidade) * preco;
            });

            var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());

            if (!isNaN(totalPedido)) {
                $("#lblTotalPedido").html(Globalize.format((totalPedido - totalDesconto), "n2"));
            }
        }

        $(document).ready(function () {

            $("#btnAdicionarDesconto").click(function () {
                var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());
                var valorDesconto = Globalize.parseFloat($("#ValorDesconto").val());
                var totalPedido = Globalize.parseFloat($("#lblTotalPedido").text());

                if (isNaN(valorDesconto)) {
                    alert('Informe o valor do desconto');
                    return;
                }

                $("#lblTotalDesconto").text(Globalize.format((totalDesconto + valorDesconto), "n2"));
                $("#lblTotalPedido").text(Globalize.format((totalPedido - valorDesconto), "n2"));
                $("#ValorDesconto").val("");

                $('#modaldesconto').modal('hide');
            });

            $("#btnRetirarDesconto").click(function () {
                var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());
                var totalPedido = Globalize.parseFloat($("#lblTotalPedido").text());

                $("#lblTotalDesconto").text(Globalize.format(0, "n2"));
                $("#lblTotalPedido").text(Globalize.format((totalPedido + totalDesconto), "n2"));

                $("#ValorDesconto").val("");
                $('#modaldesconto').modal('hide');
            });

            var parcelas;

            $.getJSON("/Parcela/Listar", function (data, status, xhr) {
                parcelas = data;
            });

            $("#PedidoStatusID").change(function () {
                var pedidoStatusId = $(this).val();
                if (pedidoStatusId == '@ChicoDoColchao.Dao.PedidoStatusDao.EPedidoStatus.RetiradoNaLoja.GetHashCode()') {
                    $("#DataEntrega").attr("disabled", "disabled");
                    $("#DataEntrega").val("");
                    //$("#NomeCarreto").attr("disabled", "disabled");
                    //$("#NomeCarreto").val("");
                    $("#ValorFrete").attr("disabled", "disabled");
                    $("#ValorFrete").val("");
                }
                else {
                    $("#DataEntrega").removeAttr("disabled");
                    //$("#NomeCarreto").removeAttr("disabled");
                    $("#ValorFrete").removeAttr("disabled");
                }
            });

            $("#TipoPagamentoID").change(function () {

                var tipoPagamentoID = parseInt($(this).val());
                var tipoPagamentoAdicionadoAoPedido = false;
                var parcela = "";

                if (isNaN(tipoPagamentoID)) { return; }

                parcela += "<select name='ParcelaID' class='form-control parcela'><option value='0'>Qtd</option>";
                $(parcelas).each(function (index, element) {
                    parcela += "<option value='" + element.ParcelaID + "'>" + element.Numero + "</option>";
                });
                parcela += '</select>';

                // verifica se o tipo de pagamento selecionado já existe no pedido
                tbTipoPagamento.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    if (data.TipoPagamentoID == tipoPagamentoID) {
                        tipoPagamentoAdicionadoAoPedido = true;
                    }
                });

                if (!tipoPagamentoAdicionadoAoPedido) {

                    var cv = false;

                    if (tipoPagamentoID == '@ChicoDoColchao.Dao.TipoPagamentoDao.ETipoPagamento.Dinheiro.GetHashCode()') {
                        parcela = "";
                    }
                    else if
                    (
                        (tipoPagamentoID == '@ChicoDoColchao.Dao.TipoPagamentoDao.ETipoPagamento.CartaoAmericanExpress.GetHashCode()') ||
                        (tipoPagamentoID == '@ChicoDoColchao.Dao.TipoPagamentoDao.ETipoPagamento.CartaoElo.GetHashCode()') ||
                        (tipoPagamentoID == '@ChicoDoColchao.Dao.TipoPagamentoDao.ETipoPagamento.CartaoHiper.GetHashCode()') ||
                        (tipoPagamentoID == '@ChicoDoColchao.Dao.TipoPagamentoDao.ETipoPagamento.CartaoMaster.GetHashCode()') ||
                        (tipoPagamentoID == '@ChicoDoColchao.Dao.TipoPagamentoDao.ETipoPagamento.CartaoVisa.GetHashCode()')
                    )
                    {
                        cv = true;
                    }

                    // adiciona pagamento
                    tbTipoPagamento.rows.add([
                    {
                        "TipoPagamentoID": tipoPagamentoID,
                        "Descricao": $(this).find(":selected").text(),
                        "ParcelaID": parcela,
                        "CV": cv == true ? "<input name='CV' type='text' class='form-control cv' />" : "",
                        "ValorPago": "<input name='ValorPago' type='text' class='form-control valorPago valor' onblur='calcularTotalPago()' />",
                        "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Tipo Pagamento' style='cursor: pointer'></i>"
                    }]).draw();

                    $(".valor").mask('000.000.000,00', { reverse: true });
                    $(".cv").mask('0000000000');
                }
            });

            $("#txtCliente").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("/Cliente/ListarAutocomplete", { term: request.term }, function (data, status, xhr) {

                        // se não houver cliente cadastrado, retorna mensagem ao usuário
                        if (data == null || data.length <= 0) { data.push({ ClienteID: 0, Nome: "Cliente não cadastrado" }); }

                        response($.map(data, function (cliente) {
                            var nome = cliente.Nome;

                            if (nome == null || nome == "") {
                                nome = cliente.NomeFantasia;
                            }

                            return { label: nome, value: cliente.ClienteID }
                        }));
                    });
                },
                select: function (event, ui) {

                    // apaga a pesquisa do cliente selecionado
                    if (ui.item.label == "Cliente não cadastrado") {
                        ui.item.label = "";
                        ui.item.value = "";
                        return;
                    }

                    $("#ClienteID").val(ui.item.value);

                    ui.item.label = ui.item.label;
                    ui.item.value = ui.item.label;
                }
            });

            $("#txtProduto").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("/Produto/ListarAutocomplete", { term: request.term }, function (data, status, xhr) {
                        response($.map(data, function (produto) {

                            // verifica se o produto tem algum preço cadastrado
                            if (produto.Preco == undefined || produto.Preco <= 0) { return { label: "Produto " + produto.Numero + " não tem preço cadastrado", value: 0 }; }

                            return { label: produto.Numero + ' | ' + produto.Descricao + ' | ' + produto.MedidaDao.Descricao + ' | ' + Globalize.format(produto.Preco * 3, "n2"), value: produto.ProdutoID }
                        }));
                    });
                },
                select: function (event, ui) {

                    var produto = ui.item.label.split("|");
                    var produtoAdicionadoAoPedido = false;
                    var idx = 0;

                    // verifica se o produto selecionado já existe no pedido
                    tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        var data = this.data();
                        if (data.ProdutoID == ui.item.value) {
                            produtoAdicionadoAoPedido = true;
                        }
                    });

                    if (produtoAdicionadoAoPedido) {
                        ui.item.label = "";
                        ui.item.value = "";
                        alert('Produto ' + produto[0].trim() + ' já adicionado ao pedido.');
                        return;
                    }

                    var p = {};
                    p.ProdutoID = ui.item.value;
                    p.Numero = produto[0].trim();
                    p.Descricao = produto[1].trim();
                    p.MedidaDao = {};
                    p.MedidaDao.Descricao = produto[2].trim();
                    p.Preco = parseFloat(produto[3].trim().replace(".", "").replace(",", ".")) / 3;

                    // adiciona o produto ao pedido
                    tbProduto.rows.add([
                    {
                        "ProdutoID": p.ProdutoID,
                        "Numero": p.Numero,
                        "Descricao": p.Descricao,
                        "MedidaDao": { "Descricao": p.MedidaDao.Descricao },
                        "Quantidade": "<input type='text' class='form-control quantidade' min='0' onblur='calcularTotalPedido()' value='1' />",
                        "Preco": "<span class='preco' data-preco='4'>" + Globalize.format(p.Preco * 3, "n2") + "</span>",
                        "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Produto' style='cursor: pointer'></i>"
                    }]).draw();

                    $(".quantidade").mask('000');

                    // atualiza o total do pedido
                    calcularTotalPedido();

                    // apaga a pesquisa do produto selecionado
                    ui.item.label = "";
                    ui.item.value = "";
                }
            });

            var tbProduto = $("#tbProduto").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "Mostrar _MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Mostrando página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)"
                },
                "columns":
                [
                    {
                        "data": function (data, type, row) {
                            return "<a href='#' onclick='modalPreco(" + data["ProdutoID"] + ")'>" + data["Numero"] + "</a>";
                        },
                        "className": "text-center"
                    },
                    { "data": "Descricao", "className": "text-left" },
                    { "data": "MedidaDao.Descricao", "className": "text-center" },
                    { "data": "Quantidade", "className": "text-center" },
                    { "data": "Preco", "className": "text-center" },
                    { "data": "Acao", "className": "text-center" }
                ]
            });

            var tbTipoPagamento = $("#tbTipoPagamento").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "Mostrar _MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Mostrando página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)"
                },
                "columns":
                [
                    { "data": "TipoPagamentoID", "className": "text-left", "visible": false },
                    { "data": "Descricao", "className": "text-left" },
                    { "data": "ParcelaID", "className": "text-center" },
                    { "data": "CV", "className": "text-center" },
                    { "data": "ValorPago", "className": "text-center" },
                    { "data": "Acao", "className": "text-center" }

                ]
            });

            var tbLojaProduto = $("#tbLojaProduto").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "_MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)",
                    "sSearch": "Pesquisar",
                    "oPaginate": { "sNext": "Próximo", "sPrevious": "Anterior", "sFirst": "Primeiro", "sLast": "Último" }
                },
                "columns":
                [
                    { "data": "LojaDao.NomeFantasia", "className": "text-center" },
                    { "data": "Quantidade", "className": "text-center" }
                ]
            });

            var tbProdutoPreco = $("#tbProdutoPreco").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "_MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)",
                    "sSearch": "Pesquisar",
                    "oPaginate": { "sNext": "Próximo", "sPrevious": "Anterior", "sFirst": "Primeiro", "sLast": "Último" }
                },
                "columns":
                [
                    { "data": "ProdutoID", "visible": false },
                    { "data": "Descricao", "className": "text-center" },
                    { "data": "Preco", "className": "text-center" }
                ]
            });

            // botão excluir produto do pedido
            $('#tbProduto tbody').on('click', 'i.glyphicon-remove', function () {
                if (confirm("Deseja realmente excluir produto do pedido?")) {
                    tbProduto.row($(this).parents('tr')).remove().draw();
                    calcularTotalPedido();
                }
            });

            // botão excluir tipo pagamento do pedido
            $('#tbTipoPagamento tbody').on('click', 'i.glyphicon-remove', function () {
                if (confirm("Deseja realmente excluir tipo de pagamento do pedido?")) {
                    tbTipoPagamento.row($(this).parents('tr')).remove().draw();
                    calcularTotalPago();
                }
            });

            // altera o preço do produto
            $('#tbProdutoPreco tbody').on('click', 'tr', function () {
                var dataProdutoPreco = tbProdutoPreco.row(this).data();
                var row = $(this);
                if (!row.hasClass('selected')) { row.addClass('selected').siblings().removeClass('selected'); }
                tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var dataProduto = this.data();
                    if (dataProduto.ProdutoID == dataProdutoPreco.ProdutoID) {
                        if (dataProdutoPreco.Descricao == "Atacado") {
                            $($(".preco")[rowIdx]).attr("data-preco", "1");
                        }
                        else if (dataProdutoPreco.Descricao == "À Vista") {
                            $($(".preco")[rowIdx]).attr("data-preco", "2");
                        }
                        else if (dataProdutoPreco.Descricao == "Até 10x") {
                            $($(".preco")[rowIdx]).attr("data-preco", "3");
                        }
                        else if (dataProdutoPreco.Descricao == "Preço") {
                            $($(".preco")[rowIdx]).attr("data-preco", "4");
                        }

                        $($(".preco")[rowIdx]).text(dataProdutoPreco.Preco);
                    }
                });
                calcularTotalPedido();
                $('#modalpreco').modal('hide');
            });

            $("#btnCadastrar").click(function () {

                var pedidoDao = {};
                var produtos = [];
                var pagamentos = [];

                pedidoDao.FuncionarioDao = [];
                pedidoDao.FuncionarioDao.push({ FuncionarioID: $("#FuncionarioID option:selected").val() });
                pedidoDao.ClienteDao = [];
                pedidoDao.ClienteDao.push({ ClienteID: $("#ClienteID").val() });
                pedidoDao.LojaDao = [];
                pedidoDao.LojaDao.push({ LojaID: $("#LojaOrigemID option:selected").val() });
                pedidoDao.LojaSaidaDao = [];
                pedidoDao.LojaSaidaDao.push({ LojaID: $("#LojaID option:selected").val(), NomeFantasia: $("#LojaID").find(":selected").text() });
                pedidoDao.PedidoStatusDao = [];
                pedidoDao.PedidoStatusDao.push({ PedidoStatusID: $("#PedidoStatusID option:selected").val() });
                pedidoDao.DataEntrega = $("#DataEntrega").val();
                //pedidoDao.NomeCarreto = $("#NomeCarreto").val();
                pedidoDao.ValorFrete = $("#ValorFrete").val().trim() != "" ? $("#ValorFrete").val() : 0;
                pedidoDao.Observacao = $("#Observacao").val();
                pedidoDao.Desconto = $("#lblTotalDesconto").text();

                // produtos
                tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    produtos.push
                    ({
                        "ProdutoID": data.ProdutoID,
                        "ProdutoDao.Descricao": data.Descricao,
                        "Quantidade": Globalize.parseInt($($($(".quantidade")[rowIdx]).parents("tr").children().eq(3)).children().val()),
                        "Preco": $($($(".preco")[rowIdx]).parents("tr").children().eq(4)).text()
                    });
                });

                pedidoDao.PedidoProdutoDao = produtos;

                // pagamentos
                tbTipoPagamento.rows().every(function (rowIdx, tableLoop, rowLoop) {

                    var data = this.data();
                    var parcelaId = 1;
                    var valorPago = $($($(".valorPago")[rowIdx]).parents("tr").children().eq(3)).children().val();
                    var cv = null;

                    // se não for dinheiro, obtém a parcela e cv
                    if (data.TipoPagamentoID != '@ChicoDoColchao.Dao.TipoPagamentoDao.ETipoPagamento.Dinheiro.GetHashCode()') {
                        parcelaId = parseInt($($($(".valorPago")[rowIdx]).parents("tr").children().eq(1)).children().val());
                        cv = $($($(".valorPago")[rowIdx]).parents("tr").children().eq(2)).children().val();
                    }

                    pagamentos.push
                    ({
                        "TipoPagamentoDao.TipoPagamentoID": data.TipoPagamentoID,
                        "ParcelaDao.ParcelaID": parcelaId,
                        "ValorPago": valorPago,
                        "CV": cv
                    });
                });

                pedidoDao.PedidoTipoPagamentoDao = pagamentos;

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: "/Pedido/Incluir",
                    data: { pedidoDao: pedidoDao },
                    success: function (data) {

                        if (!data.Sucesso) {
                            alert(data.Mensagem);
                            return;
                        }

                        $("#PedidoForm")[0].reset();
                        tbProduto.clear().draw();
                        tbTipoPagamento.clear().draw();
                        $("#DataEntrega").val("");
                        $("#ValorFrete").val("");
                        $("#lblTotalPedido").html("0,00");
                        $("#lblTotalPago").html("0,00");
                        $("#lblTotalDesconto").html("0,00");
                        $("#ClienteID").val("");
                        $("#DataEntrega").removeAttr("disabled");
                        //$("#NomeCarreto").removeAttr("disabled");
                        $("#ValorFrete").removeAttr("disabled");

                        alert(data.Mensagem);
                    }
                });
            });

        });
    </script>
}
<div class="container" style="padding-bottom: 20px;">
    <h2><i class="glyphicon glyphicon-ok" style="color: #0f3456" title="Pedido"></i> Tirar Pedido</h2>
    <hr />
    <form id="PedidoForm" name="PedidoForm">
        <div class="row">
            <div class="col-lg-4">
                <div class="form-group">
                    @Html.DropDownListFor(x => x.FuncionarioDao.FirstOrDefault().FuncionarioID, new SelectList(Model.FuncionarioDao, "FuncionarioID", "Nome"), "Consultor", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-lg-10">
                            <input id="txtCliente" name="txtCliente" type="text" class="form-control" placeholder="CPF/CNPJ do cliente (Mínimo de 3 letras)" />
                            <input type="hidden" name="ClienteID" id="ClienteID" />
                        </div>
                        <div class="col-lg-2">
                            <a href="@Url.Action("Cadastro", "Cliente")" target="_blank"><i class="glyphicon glyphicon-plus" title="Cadastrar cliente" style="vertical-align: bottom"></i></a>
                        </div>
                    </div>
                </div>
                @{
                    if (Request.Cookies.Get("ChicoDoColchao_Loja") == null)
                    {
                        <div class="form-group">
                            @Html.DropDownListFor(x => x.LojaDao.FirstOrDefault().LojaID, new SelectList(Model.LojaDao, "LojaID", "NomeFantasia"), "Loja de origem dos produtos", new { @class = "form-control", @id = "LojaOrigemID" })
                        </div>
                    }
                }
                <div class="form-group">
                    @Html.DropDownListFor(x => x.LojaSaidaDao.FirstOrDefault().LojaID, new SelectList(Model.LojaSaidaDao, "LojaID", "NomeFantasia"), "Loja de saída dos produtos", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.DropDownListFor(x => x.PedidoStatusDao.FirstOrDefault().PedidoStatusID, new SelectList(Model.PedidoStatusDao, "PedidoStatusID", "Descricao"), "Status do pedido", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(x => x.DataEntrega, new { @class = "form-control data datepicker", @placeholder = "Data da entrega (Opcional)" })
                </div>
                @*<div class="form-group">
                        @Html.TextBoxFor(x => x.NomeCarreto, new { @class = "form-control", @placeholder = "Nome do carreto (Opcional)", @maxlength = "100" })
                    </div>*@
                <div class="form-group">
                    @Html.TextBoxFor(x => x.ValorFrete, new { @class = "form-control valor", @placeholder = "Valor do frete (Opcional)" })
                </div>
            </div>
            <div class="col-lg-8">
                <label style="font-size: 18px; margin-bottom: 10px; font-weight: normal">Produtos</label>
                <input id="txtProduto" name="txtProduto" type="text" class="form-control" placeholder="Produtos (Mínimo de 3 letras)" />
                <div class="table-responsive">
                    <table id="tbProduto" class="table table-striped table-responsive table-condensed">
                        <thead>
                            <tr>
                                <td class="text-center" style="width: 10%"><b>Número</b></td>
                                <td class="text-left" style="width: 50%"><b>Descrição</b></td>
                                <td class="text-center" style="width: 15%"><b>Medida</b></td>
                                <td class="text-center" style="width: 10%"><b>Qtd</b></td>
                                <td class="text-center" style="width: 10%"><b>Preço</b></td>
                                <td class="text-center" style="width: 5%"><b>Ação</b></td>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                <div style="margin-top: 10px; margin-bottom: 10px">
                    <div class="col-lg-12 text-right" style="font-size: 18px; padding: 0">Total Pedido: <span style="color: cornflowerblue">R$ </span><label id="lblTotalPedido" style="color: cornflowerblue">0,00</label></div>
                </div>
                <div style="margin-top: 10px; margin-bottom: 10px">
                    <div class="col-lg-12 text-right" style="font-size: 18px; padding: 0"><a href="#" data-toggle="modal" data-target="#modaldesconto">Desconto Autorizado</a>: <span style="color: darkorange">R$ </span><label id="lblTotalDesconto" style="color: darkorange; font-size: 18px">0,00</label></div>
                </div>
                <h4>Pagamentos</h4>
                @Html.DropDownListFor(x => x.TipoPagamentoDao.FirstOrDefault().TipoPagamentoID, new SelectList(Model.TipoPagamentoDao, "TipoPagamentoID", "Descricao"), "Tipo de pagamento", new { @class = "form-control" })
                <div class="table-responsive">
                    <table id="tbTipoPagamento" class="table table-striped table-responsive table-condensed">
                        <thead>
                            <tr>
                                <td></td>
                                <td class="text-left" style="width: 40%"><b>Descrição</b></td>
                                <td class="text-center" style="width: 10%"><b>Parcelas</b></td>
                                <td class="text-center" style="width: 20%"><b>CV</b></td>
                                <td class="text-center" style="width: 20%"><b>Valor Pago</b></td>
                                <td class="text-center" style="width: 10%"><b>Ação</b></td>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                <h4 class="text-right">Total Pago: <span style="color: seagreen">R$ </span><label id="lblTotalPago" style="color: seagreen">0,00</label></h4>
            </div>
        </div>
        <div class="form-group">
            @Html.TextAreaFor(x => x.Observacao, 5, 10, new { @class = "form-control", @placeholder = "Observação (Opcional)" })
        </div>
        <div class="form-group">
            <button id="btnCadastrar" type="button" class="btn btn-success">Cadastrar</button>
            <button id="btnLista" type="button" class="btn btn-info" onclick="window.location.href='@Url.Action("Lista", "Pedido")'">Lista de Pedidos Cadastrados</button>
        </div>
    </form>
</div>
<div class="modal fade" id="modaldesconto" tabindex="-1" role="dialog" aria-labelledby="ModalDesconto" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Fechar</span></button>
                <h4 class="modal-title" id="myModalLabel">Desconto Autorizado</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-6">
                        <input id="ValorDesconto" name="ValorDesconto" type="text" class="form-control valor" placeholder="Valor do desconto em reais" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnRetirarDesconto" type="button" class="btn btn-danger">Retirar Desconto</button>
                <button id="btnAdicionarDesconto" type="button" class="btn btn-warning">Adicionar Desconto</button>
            </div>
        </div>
    </div>
</div>
@Html.Partial("_ModalProdutoPreco")