@using ChicoDoColchao.Dao;
@using Newtonsoft.Json;

@model PedidoDao

@{
    ViewBag.Title = "Pedido - Troca";

    UsuarioDao usuarioDao = null;
    if (Request.Cookies.Get("ChicoDoColchao_Usuario") != null)
    {
        usuarioDao = JsonConvert.DeserializeObject<UsuarioDao>(Request.Cookies.Get("ChicoDoColchao_Usuario").Value);
    }

    //LojaDao lojaDao = new LojaDao();
    //if (Request.Cookies.Get("ChicoDoColchao_Loja") != null)
    //{
    //    lojaDao = JsonConvert.DeserializeObject<LojaDao>(Request.Cookies.Get("ChicoDoColchao_Loja").Value);
    //}
}
@section styles
{
    <style type="text/css">
        .table.dataTable tbody td {
            font-size: 13px;
        }

        .link_preco {
            cursor: pointer;
        }

        #tbProdutoPreco tbody tr {
            cursor: pointer;
        }

        .titulo {
            font-size: 18px;
            margin-bottom: 10px;
            font-weight: normal;
        }
    </style>
}
@section scripts
{
    <script type="text/javascript">

        function modalPreco(produtoId, produtoPreco) {

            $.getJSON("/Produto/Listar", { ProdutoID: produtoId }, function (data) {

                $("#lblNumeroProduto").text(data[0].Numero);

                var tbLojaProduto = $("#tbLojaProduto").DataTable();

                tbLojaProduto.clear();
                tbLojaProduto.rows.add(data[0].LojaProdutoDao).draw();

                var precoAtacado = Globalize.format(data[0].PrecoAtacado, "n2");
                var precoAVista = Globalize.format(data[0].PrecoAVista, "n2");
                var precoAte10 = Globalize.format(data[0].PrecoAte10, "n2");
                var precoNormal = Globalize.format(data[0].PrecoNormal, "n2");

                var produtoPrecos =
                [
                    { ProdutoID: data[0].ProdutoID, Descricao: "Atacado", Preco: precoAtacado },
                    { ProdutoID: data[0].ProdutoID, Descricao: "À Vista", Preco: precoAVista },
                    { ProdutoID: data[0].ProdutoID, Descricao: "Até 10x", Preco: precoAte10 },
                    { ProdutoID: data[0].ProdutoID, Descricao: "Preço", Preco: precoNormal },
                ];

                var tbProdutoPreco = $("#tbProdutoPreco").DataTable();

                tbProdutoPreco.clear();
                tbProdutoPreco.rows.add(produtoPrecos).draw();

                // marca a linha selecionada para o preço selecionado
                switch (produtoPreco)
                {
                    case (precoAtacado): // atacado
                        $(tbProdutoPreco.row(0).node()).addClass('selected');
                        break;
                    case (precoAVista): // à vista
                        $(tbProdutoPreco.row(1).node()).addClass('selected');
                        break;
                    case (precoAte10): // até 10x
                        $(tbProdutoPreco.row(2).node()).addClass('selected');
                        break;
                    case (precoNormal): // preço
                        $(tbProdutoPreco.row(3).node()).addClass('selected');
                        break;
                    default:
                }

                $('#modalpreco').modal('show');
            });
        }

        function calcularTotalPago() {

            var totalPago = 0;
            var tbPagamentos = $("#tbTipoPagamento").DataTable();

            if (tbPagamentos.rows().count() <= 0) {
                $("#lblTotalPago").html(Globalize.format(totalPago, "n2"));
                return;
            }

            $(".valorPago").each(function (index, element) {
                var valorPago = Globalize.parseFloat($(element).val());
                if (isNaN(valorPago)) { valorPago = 0; }
                totalPago += valorPago;
            });

            if (!isNaN(totalPago)) {
                $("#lblTotalPago").html(Globalize.format(totalPago, "n2"));
            }
        }

        function calcularTotalPedido() {

            var quantidadeEntrada = 0;
            var quantidadeSaida = 0;
            var totalEntrada = 0;
            var totalSaida = 0;
            var totalAPagar = 0;

            var tbProdutos = $("#tbProduto").DataTable();
            if (tbProdutos.rows().count() <= 0)
            {
                $("#lblTotalEntrada").html(Globalize.format(totalEntrada, "n2"));
                $("#lblTotalSaida").html(Globalize.format(totalSaida, "n2"));
                $("#lblTotalAPagar").html(Globalize.format(totalAPagar, "n2"));

                return;
            }

            tbProdutos.rows().every(function (rowIdx, tableLoop, rowLoop) {
                var data = this.data();

                quantidadeEntrada = data.QtdEntrada;

                if (isNaN(quantidadeEntrada) || quantidadeEntrada == '' || quantidadeEntrada == 'undefined') {
                    quantidadeEntrada = 0;
                }

                precoEntrada = Globalize.parseFloat(data.PrecoEntrada);

                if (isNaN(precoEntrada))
                {
                    precoEntrada = 0;
                }

                totalEntrada += parseInt(quantidadeEntrada) * precoEntrada;

                quantidadeSaida = data.QtdSaida;

                if (isNaN(quantidadeSaida) || quantidadeSaida == '' || quantidadeSaida == 'undefined') {
                    quantidadeSaida = 0;
                }

                precoSaida = Globalize.parseFloat(data.PrecoSaida);

                if (isNaN(precoSaida))
                {
                    precoSaida = 0;
                }

                totalSaida += parseInt(quantidadeSaida) * precoSaida;
            });

            var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());

            $("#lblTotalSaida").html(Globalize.format(totalSaida, "n2"));
            $("#lblTotalDesconto").html(Globalize.format(totalDesconto, "n2"));
            $("#lblTotalEntrada").html(Globalize.format(totalEntrada, "n2"));

            totalAPagar = totalSaida - totalDesconto - totalEntrada;

            $("#lblTotalAPagar").html(Globalize.format(totalAPagar, "n2"));
        }

        var parcelas;

        function obterParcelas(data)
        {
            var p = "<select name='ParcelaID' class='form-control parcela'>"
            p += "<option value='0'>Qtd</option>";
            $(data).each(function (i, e) {
                p += "<option value='" + e.ParcelaID + "'>" + e.Numero + "</option>";
            });
            p += '</select>';
            return p;
        }

        function changeProduto()
        {
            $(".produtoId").change(function ()
            {
                var quantidade = "";
                var preco = "";
                var dtEntrega = "";
                var produtoId = $(this).val();

                var tbProduto = $("#tbProduto").DataTable();

                var idx = tbProduto.row($(this).parents('tr')).index();

                if (produtoId != "")
                {
                    var pedido = @Html.Raw(Json.Encode(ViewBag.PedidoDao));

                    quantidade = "<select class='form-control qtdEntrada' onchange='changeQtdEntrada(this); calcularTotalPedido()'>"
                    $(pedido.PedidoProdutoDao).each(function (i, e)
                    {
                        if (e.ProdutoDao.ProdutoID == produtoId)
                        {
                            quantidade += "<option value='0'>0</option>";
                            for (var i = 1; i <= e.Quantidade; i++)
                            {
                                quantidade += "<option value='" + i + "'>" + i + "</option>";
                            }

                            preco = Globalize.format(e.Preco, "n2");
                            dtEntrega = moment(e.DataEntrega).format("DD/MM/YYYY");
                        }
                    });
                    quantidade += "</select>";
                }

                tbProduto.row(idx).data().ProdutoIDEntrada = produtoId;
                tbProduto.row(idx).data().QuantidadeEntrada = quantidade;
                tbProduto.row(idx).data().QtdEntrada = 0;
                tbProduto.row(idx).data().PrecoEntrada = preco;
                tbProduto.row(idx).data().DataEntregaEntrada = "<span style='vertical-align: sub'>" + dtEntrega + "</span>";

                tbProduto.cells(idx,1).invalidate();
                tbProduto.cells(idx,2).invalidate();
                tbProduto.cells(idx,3).invalidate();
                tbProduto.cells(idx,4).invalidate();
                tbProduto.cells(idx,5).invalidate();

                tbProduto.draw();

                autocompleteProduto();

                calcularTotalPedido();
            });
        }

        function autocompleteProduto()
        {
            var tbProduto = $("#tbProduto").DataTable();

            $(".produto").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("/Produto/ListarAutocomplete", { term: request.term }, function (data, status, xhr) {
                        response($.map(data, function (produto) {

                            // verifica se o produto tem algum preço cadastrado
                            if (produto.Preco == undefined || produto.Preco <= 0) { return { label: "Produto " + produto.Numero + " não tem preço cadastrado", value: 0 }; }

                            return { label: produto.Numero + ' | ' + produto.Descricao + ' | ' + produto.MedidaDao.Descricao + ' | ' + Globalize.format(produto.PrecoNormal, "n2"), value: produto.ProdutoID }
                        }));
                    });
                },
                select: function (event, ui) {

                    var produto = ui.item.label.split("|");
                    var produtoAdicionadoAoPedido = false;
                    var idx = tbProduto.row($(this).parents('tr')).index();

                    // verifica se o produto selecionado já existe no pedido
                    tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        var data = this.data();
                        if (data.ProdutoIDSaida == ui.item.value) {
                            produtoAdicionadoAoPedido = true;
                        }
                    });

                    if (produtoAdicionadoAoPedido) {
                        ui.item.label = "";
                        ui.item.value = "";
                        alert('Produto ' + produto[0].trim() + ' já adicionado a troca.');
                        return;
                    }

                    var dataEntrega = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='' />";
                    if ($("#PedidoStatusID").val() == '@PedidoStatusDao.EPedidoStatus.RetiradoNaLoja.GetHashCode()')
                    {
                        dataEntrega = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='' disabled='disabled' />";
                    }

                    tbProduto.row(idx).data().ProdutoIDSaida = ui.item.value;
                    tbProduto.row(idx).data().NumeroSaida = "<a href='#' style='vertical-align: sub' onclick='modalPreco(" + ui.item.value + ",\"" + Globalize.format(parseFloat(produto[3].trim().replace(".", "").replace(",", ".")), "n2") + "\")'>" + produto[0].trim() + "</a>";
                    tbProduto.row(idx).data().QuantidadeSaida = "<input type='text' class='form-control quantidade text-center' min='0' onblur='changeQtdSaida(this); calcularTotalPedido()' />";
                    tbProduto.row(idx).data().QtdSaida = 0;
                    tbProduto.row(idx).data().PrecoSaida = Globalize.format(parseFloat(produto[3].trim().replace(".", "").replace(",", ".")), "n2");
                    tbProduto.row(idx).data().DataEntregaSaida = dataEntrega;

                    tbProduto.cells(idx,7).invalidate();
                    tbProduto.cells(idx,8).invalidate();
                    tbProduto.cells(idx,9).invalidate();
                    tbProduto.cells(idx,10).invalidate();
                    tbProduto.cells(idx,11).invalidate();
                    tbProduto.cells(idx,12).invalidate();

                    tbProduto.draw();

                    calcularTotalPedido();

                    // apaga a pesquisa do produto selecionado
                    ui.item.label = "";
                    ui.item.value = "";
                }
            });
        }

        function changeQtdEntrada(element)
        {
            var idx = $(element).closest('tr').index();

            var tbProduto = $("#tbProduto").DataTable();

            tbProduto.row(idx).data().QtdEntrada = $(element).val() == "" ? 0 : $(element).val();
            tbProduto.cells(idx,3).invalidate();

            tbProduto.draw();
        }

        function changeQtdSaida(element)
        {
            var idx = $(element).closest('tr').index();

            var tbProduto = $("#tbProduto").DataTable();

            tbProduto.row(idx).data().QtdSaida = $(element).val() == "" ? 0 : $(element).val();
            tbProduto.cells(idx,10).invalidate();

            tbProduto.draw();
        }

        $(document).ready(function () {

            parcelas = obterParcelas(@Html.Raw(Json.Encode(ViewBag.ParcelaDao)));

            $("#btnAdicionarDesconto").click(function ()
            {
                var totalDesconto = Globalize.parseFloat($("#lblTotalDesconto").text());
                var valorDesconto = Globalize.parseFloat($("#ValorDesconto").val());
                var totalEntrada = Globalize.parseFloat($("#lblTotalEntrada").text());
                var totalSaida = Globalize.parseFloat($("#lblTotalSaida").text());

                if (isNaN(valorDesconto)) {
                    alert('Informe o valor do desconto');
                    return;
                }

                totalDesconto = totalDesconto + valorDesconto;

                $("#lblTotalDesconto").text(Globalize.format(totalDesconto, "n2"));
                $("#lblTotalAPagar").text(Globalize.format((totalSaida - totalDesconto - totalEntrada), "n2"));

                $("#ValorDesconto").val("");

                $('#modaldesconto').modal('hide');
            });

            $("#btnRetirarDesconto").click(function ()
            {
                var totalDesconto = 0;
                var totalEntrada = Globalize.parseFloat($("#lblTotalEntrada").text());
                var totalSaida = Globalize.parseFloat($("#lblTotalSaida").text());

                $("#lblTotalDesconto").text(Globalize.format(0, "n2"));

                $("#lblTotalAPagar").text(Globalize.format((totalSaida - totalDesconto - totalEntrada), "n2"));

                $("#ValorDesconto").val("");
                $('#modaldesconto').modal('hide');
            });

            // change da data de entrega do grid de produtos
            $(document).on('change', '.dataEntrega', function(e)
            {
                var index = $(this).closest('tr').index();

                var tbProduto = $("#tbProduto").DataTable();

                tbProduto.row(index).data().DataEntregaSaida = "<input type='text' class='form-control data datepicker dataEntrega text-center' value='" + $(this).val() + "' />";
                tbProduto.cells(index, 12).invalidate();
                tbProduto.draw();

                $(".dataEntrega").datepicker({
                    dateFormat: 'dd/mm/yy',
                    dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                    dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
                    dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'],
                    monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                    monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                    nextText: 'Próximo',
                    prevText: 'Anterior',
                    changeMonth: true,
                    changeYear: true
                });

            });

            // change do status do pedido
            $("#PedidoStatusID").change(function () {
                var pedidoStatusId = $(this).val();
                if (pedidoStatusId == '@PedidoStatusDao.EPedidoStatus.RetiradoNaLoja.GetHashCode()') {
                    $(".dataEntrega").attr("disabled", "disabled");
                    $(".dataEntrega").val("");
                    $("#ValorFrete").attr("disabled", "disabled");
                    $("#ValorFrete").val("");
                }
                else {
                    $(".dataEntrega").removeAttr("disabled");
                    $("#ValorFrete").removeAttr("disabled");
                }
            });

            $("#TipoPagamentoID").change(function () {

                var tipoPagamentoID = parseInt($(this).val());
                var descricaoTipoPagamento = $("#TipoPagamentoID option:selected").text();
                var tipoPagamentoAdicionadoAoPedido = false;

                if (isNaN(tipoPagamentoID)) { return; }

                // verifica se o tipo de pagamento selecionado já existe no pedido
                tbTipoPagamento.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    if (data.TipoPagamentoID == tipoPagamentoID) {
                        tipoPagamentoAdicionadoAoPedido = true;
                    }
                });

                if (!tipoPagamentoAdicionadoAoPedido) {

                    var cv = false;
                    if (descricaoTipoPagamento.indexOf("Cartão") == 0 || descricaoTipoPagamento.indexOf("cartão") == 0 || descricaoTipoPagamento.indexOf("cartao") == 0 || descricaoTipoPagamento.indexOf("Cartao") == 0)
                    {
                        cv = true;
                    }

                    // adiciona pagamento
                    tbTipoPagamento.rows.add([
                    {
                        "TipoPagamentoID": tipoPagamentoID,
                        "Descricao": $(this).find(":selected").text(),
                        "ParcelaID": tipoPagamentoID == '@TipoPagamentoDao.ETipoPagamento.Dinheiro.GetHashCode()' ? "" : parcelas,
                        "CV": cv == true ? "<input name='CV' type='text' class='form-control cv text-right' />" : "",
                        "ValorPago": "<input name='ValorPago' type='text' class='form-control valorPago valor text-right' onblur='calcularTotalPago()' />",
                        "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Tipo Pagamento' style='cursor: pointer; vertical-align: bottom'></i>"
                    }]).draw();

                    $(".valor").mask('000.000.000,00', { reverse: true });
                    $(".cv").mask('00000000000000000000');
                }
            });

            $("#txtCliente").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("/Cliente/ListarAutocomplete", { term: request.term }, function (data, status, xhr) {

                        // se não houver cliente cadastrado, retorna mensagem ao usuário
                        if (data == null || data.length <= 0) { data.push({ ClienteID: 0, Nome: "Cliente não cadastrado" }); }

                        response($.map(data, function (cliente) {
                            var nome = cliente.Nome;

                            if (nome == null || nome == "") {
                                nome = cliente.NomeFantasia;
                            }

                            return { label: nome, value: cliente.ClienteID }
                        }));
                    });
                },
                select: function (event, ui) {

                    // apaga a pesquisa do cliente selecionado
                    if (ui.item.label == "Cliente não cadastrado") {
                        ui.item.label = "";
                        ui.item.value = "";
                        return;
                    }

                    $("#ClienteID").val(ui.item.value);

                    ui.item.label = ui.item.label;
                    ui.item.value = ui.item.label;
                },
                change: function (event, ui) {
                    if (ui == null || ui.item == undefined || ui.item == null) {
                        $("#ClienteID").val("");
                    }
                }
            });

            var tbProduto = $("#tbProduto").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "Mostrar _MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Mostrando página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)"
                },
                "rowCallback": function (row, data, index)
                {
                    $(".quantidade").mask('000');
                    $(".dataEntrega").datepicker({
                        dateFormat: 'dd/mm/yy',
                        dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                        dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
                        dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'],
                        monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                        monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                        nextText: 'Próximo',
                        prevText: 'Anterior',
                        changeMonth: true,
                        changeYear: true
                    });
                },
                "columns":
                [
                    { "data": "DescricaoEntrada", "className": "text-left" },
                    { "data": "ProdutoIDEntrada", "className": "text-center", "visible": false  },
                    { "data": "QuantidadeEntrada", "className": "text-center" },
                    { "data": "QtdEntrada", "className": "text-center", "visible": false  },
                    { "data": "PrecoEntrada", "className": "text-center" },
                    { "data": "DataEntregaEntrada", "className": "text-center" },
                    { "data": "DescricaoSaida", "className": "text-left" },
                    { "data": "ProdutoIDSaida", "className": "text-left", "visible": false },
                    { "data": "NumeroSaida", "className": "text-center" },
                    { "data": "QuantidadeSaida", "className": "text-center" },
                    { "data": "QtdSaida", "className": "text-center", "visible": false  },
                    { "data": "PrecoSaida", "className": "text-center" },
                    { "data": "DataEntregaSaida", "className": "text-center" },
                    { "data": "Acao", "className": "text-center" }
                ]
            });

            var tbTipoPagamento = $("#tbTipoPagamento").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "Mostrar _MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Mostrando página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)"
                },
                "columns":
                [
                    { "data": "TipoPagamentoID", "className": "text-left", "visible": false },
                    { "data": "Descricao", "className": "text-left" },
                    { "data": "ParcelaID", "className": "text-center" },
                    { "data": "CV", "className": "text-center" },
                    { "data": "ValorPago", "className": "text-center" },
                    { "data": "Acao", "className": "text-center" }
                ]
            });

            var tbLojaProduto = $("#tbLojaProduto").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "_MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)",
                    "sSearch": "Pesquisar",
                    "oPaginate": { "sNext": "Próximo", "sPrevious": "Anterior", "sFirst": "Primeiro", "sLast": "Último" }
                },
                "columns":
                [
                    { "data": "LojaDao.NomeFantasia", "className": "text-center" },
                    { "data": "Quantidade", "className": "text-center" }
                ]
            });

            var tbProdutoPreco = $("#tbProdutoPreco").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "language": {
                    "lengthMenu": "_MENU_ registros por página",
                    "zeroRecords": "Sem registros a serem exibidos",
                    "info": "Página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros a serem exibidos",
                    "infoFiltered": "(filtrados de _MAX_ total de registros)",
                    "sSearch": "Pesquisar",
                    "oPaginate": { "sNext": "Próximo", "sPrevious": "Anterior", "sFirst": "Primeiro", "sLast": "Último" }
                },
                "columns":
                [
                    { "data": "ProdutoID", "visible": false },
                    { "data": "Descricao", "className": "text-center" },
                    { "data": "Preco", "className": "text-center" }
                ]
            });

            // botão excluir produto da troca
            $('#tbProduto tbody').on('click', 'i.glyphicon-remove', function () {
                if (confirm("Deseja realmente excluir produto da troca?")) {
                    tbProduto.row($(this).parents('tr')).remove().draw();
                    calcularTotalPedido();
                }
            });

            // botão excluir tipo pagamento da troca
            $('#tbTipoPagamento tbody').on('click', 'i.glyphicon-remove', function () {
                if (confirm("Deseja realmente excluir tipo de pagamento da troca?")) {
                    tbTipoPagamento.row($(this).parents('tr')).remove().draw();
                    calcularTotalPago();
                }
            });

            // altera o preço do produto
            $('#tbProdutoPreco tbody').on('click', 'tr', function () {
                var dataProdutoPreco = tbProdutoPreco.row(this).data();
                var row = $(this);
                if (!row.hasClass('selected')) { row.addClass('selected').siblings().removeClass('selected'); }
                tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop)
                {
                    var dataProduto = this.data();
                    if (dataProduto.ProdutoIDSaida == dataProdutoPreco.ProdutoID)
                    {
                        dataProduto.NumeroSaida = "<a href='#' style='vertical-align: sub' onclick='modalPreco(" + dataProdutoPreco.ProdutoID + ",\"" + Globalize.format(parseFloat(dataProdutoPreco.Preco.replace(".", "").replace(",", ".")), "n2") + "\")'>" + $(dataProduto.NumeroSaida).text() + "</a>";
                        dataProduto.PrecoSaida = dataProdutoPreco.Preco;

                        this.cells(rowIdx,8).invalidate();
                        this.cells(rowIdx,11).invalidate();
                    }
                });
                tbProduto.draw();
                calcularTotalPedido();
                $('#modalpreco').modal('hide');
            });

            $("#btnCadastrarPedido").click(function () {

                var pedidoDao = {};
                var pedidoProdutoDao = [];
                var pedidoTipoPagamento = [];

                pedidoDao.ConsultorDao = [];
                pedidoDao.ConsultorDao.push({ FuncionarioID: $("#FuncionarioID option:selected").val() });
                pedidoDao.ClienteDao = [];
                pedidoDao.ClienteDao.push({ ClienteID: $("#ClienteID").val() });

                pedidoDao.LojaDao = [];
                @*if (@lojaDao.LojaID > 0)
                {
                    pedidoDao.LojaDao.push({ LojaID: '@lojaDao.LojaID' });
                }
                else
                {*@
                    pedidoDao.LojaDao.push({ LojaID: $("#LojaOrigemID option:selected").val() });
                //}

                pedidoDao.LojaSaidaDao = [];
                pedidoDao.LojaSaidaDao.push({ LojaID: $("#LojaID option:selected").val() });
                pedidoDao.PedidoStatusDao = [];
                pedidoDao.PedidoStatusDao.push({ PedidoStatusID: $("#PedidoStatusID option:selected").val() });
                pedidoDao.ValorFrete = $("#ValorFrete").val().trim() != "" ? $("#ValorFrete").val() : 0;
                pedidoDao.Observacao = $("#Observacao").val();
                pedidoDao.Desconto = $("#lblTotalDesconto").text();
                pedidoDao.UsuarioPedidoDao = { UsuarioID: '@usuarioDao.UsuarioID' };

                // produtos
                tbProduto.rows().every(function (rowIdx, tableLoop, rowLoop)
                {
                    var data = this.data();

                    var dtEntrega = $(data.DataEntregaSaida).val();
                    
                    // entrada
                    if (data.ProdutoIDEntrada > 0 && data.QtdEntrada > 0)
                    {
                        pedidoProdutoDao.push
                        ({
                            "ProdutoID": data.ProdutoIDEntrada,
                            "Quantidade": Globalize.parseInt(data.QtdEntrada),
                            "Preco": data.PrecoEntrada,
                            "Tipo": '@PedidoProdutoDao.ETipo.Entrada.GetHashCode()',
                            "UsuarioTrocaDao.UsuarioID": '@usuarioDao.UsuarioID',
                        });
                    }

                    // saída
                    if (data.ProdutoIDSaida > 0 && data.QtdSaida > 0)
                    {
                        pedidoProdutoDao.push
                        ({
                            "ProdutoID": data.ProdutoIDSaida,
                            "Quantidade": Globalize.parseInt(data.QtdSaida),
                            "Preco": data.PrecoSaida,
                            "DataEntrega": dtEntrega,
                            "UsuarioEntregaDao.UsuarioID": dtEntrega == '' || dtEntrega == 'undefined' ? 0 : '@usuarioDao.UsuarioID',
                            "Tipo": '@PedidoProdutoDao.ETipo.Saida.GetHashCode()'
                        });
                    }
                });

                pedidoDao.PedidoProdutoDao = pedidoProdutoDao;

                // pagamentos
                tbTipoPagamento.rows().every(function (rowIdx, tableLoop, rowLoop) {

                    var data = this.data();
                    var parcelaId = 1;
                    var valorPago = $($($(".valorPago")[rowIdx]).parents("tr").children().eq(3)).children().val();
                    var cv = null;

                    // se não for dinheiro, obtém a parcela e cv
                    if (data.TipoPagamentoID != '@TipoPagamentoDao.ETipoPagamento.Dinheiro.GetHashCode()') {
                        parcelaId = parseInt($($($(".valorPago")[rowIdx]).parents("tr").children().eq(1)).children().val());
                        cv = $($($(".valorPago")[rowIdx]).parents("tr").children().eq(2)).children().val();
                    }

                    pedidoTipoPagamento.push
                    ({
                        "TipoPagamentoDao.TipoPagamentoID": data.TipoPagamentoID,
                        "ParcelaDao.ParcelaID": parcelaId,
                        "ValorPago": valorPago,
                        "CV": cv
                    });
                });

                pedidoDao.PedidoTipoPagamentoDao = pedidoTipoPagamento;

                // verifica se existe uma troca associado ao pedido
                if ('@ViewBag.PedidoDao' != '')
                {
                    var pedido = @Html.Raw(Json.Encode(ViewBag.PedidoDao));
                    pedidoDao.PedidoID = pedido.PedidoID;
                }

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: "/Pedido/Trocar",
                    data: { pedidoDao: pedidoDao },
                    success: function (data) {

                        if (!data.Sucesso) {
                            alert(data.Mensagem);
                            return;
                        }

                        $("#PedidoForm")[0].reset();
                        tbProduto.clear().draw();
                        tbTipoPagamento.clear().draw();
                        $("#ValorFrete").val("");

                        $("#lblTotalEntrada").html("0,00");
                        $("#lblTotalDesconto").html("0,00");
                        $("#lblTotalSaida").html("0,00");
                        $("#lblTotalAPagar").html("0,00");
                        $("#lblTotalPago").html("0,00");

                        $("#ClienteID").val("");
                        $("#ValorFrete").removeAttr("disabled");

                        alert(data.Mensagem);

                        window.location.href = "/Pedido/Lista";
                    }
                });
            });

            if ('@ViewBag.PedidoDao' != '')
            {
                var pedidoDao = @Html.Raw(Json.Encode(ViewBag.PedidoDao));

                $("#txtCliente").val(pedidoDao.ClienteDao[0].Nome);
                $("#ClienteID").val(pedidoDao.ClienteDao[0].ClienteID);
                $("#FuncionarioID").val(pedidoDao.ConsultorDao[0].FuncionarioID);
                $("#LojaOrigemID").val(pedidoDao.LojaDao[0].LojaID);
                $("#LojaID").val(pedidoDao.LojaSaidaDao[0].LojaID);
                //$("#PedidoStatusID").val(pedidoDao.PedidoStatusDao[0].PedidoStatusID);
                //$("#ValorFrete").val(Globalize.format(pedidoDao.ValorFrete, "n2"));
                //$("#Observacao").val(Globalize.format(pedidoDao.Observacao, "n2"));

                //$("#lblTotalDesconto").text(Globalize.format(pedidoDao.Desconto, "n2"));

                var selectProduto = "<select name='ProdutoID' class='form-control produtoId'>"
                selectProduto += "<option value=''>Selecione</option>";
                $(pedidoDao.PedidoProdutoDao).each(function (i, e) {
                    selectProduto += "<option value='" + e.ProdutoID + "'>" + e.ProdutoDao.Numero + " - " + e.ProdutoDao.Descricao + " - " + e.ProdutoDao.MedidaDao.Descricao + "</option>";
                });
                selectProduto += '</select>';

                // adiciona o produto ao pedido
                tbProduto.rows.add([
                {
                    "DescricaoEntrada": selectProduto,
                    "ProdutoIDEntrada": "",
                    "QuantidadeEntrada": "",
                    "QtdEntrada": "",
                    "PrecoEntrada": "",
                    "DataEntregaEntrada": "",
                    "DescricaoSaida": "<input type='text' class='form-control produto' placeholder='Produtos (Mínimo de 3 letras)' />",
                    "ProdutoIDSaida": "",
                    "NumeroSaida": "",
                    "QuantidadeSaida": "",
                    "QtdSaida": "",
                    "PrecoSaida": "",
                    "DataEntregaSaida": "",
                    "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Produto' style='cursor: pointer; vertical-align: bottom'></i>"
                }]).draw();
            }

            changeProduto();
            autocompleteProduto();

            $("#btnAdicionarProduto").click(function()
            {
                // adiciona o produto ao pedido
                tbProduto.rows.add([
                {
                    "DescricaoEntrada": selectProduto,
                    "ProdutoIDEntrada": "",
                    "QuantidadeEntrada": "",
                    "QtdEntrada": "",
                    "PrecoEntrada": "",
                    "DataEntregaEntrada": "",
                    "DescricaoSaida": "<input type='text' class='form-control produto' placeholder='Produtos (Mínimo de 3 letras)' />",
                    "ProdutoIDSaida": "",
                    "NumeroSaida": "",
                    "QuantidadeSaida": "",
                    "QtdSaida": "",
                    "PrecoSaida": "",
                    "DataEntregaSaida": "",
                    "Acao": "<i class='glyphicon glyphicon-remove' title='Excluir Produto' style='cursor: pointer; vertical-align: bottom'></i>"
                }]).draw();

                autocompleteProduto();
                changeProduto();
            });

        });
    </script>
}
<div class="container">
    <h2><i class="glyphicon glyphicon-retweet" style="color: #0f3456" title="Pedido"></i> Trocar Pedido</h2>
    <hr />
    <form id="PedidoForm" name="PedidoForm">
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <h4>Pedido @ViewBag.PedidoDao.PedidoID</h4>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    <label>Consultor</label>
                    @Html.DropDownListFor(x => x.ConsultorDao.FirstOrDefault().FuncionarioID, new SelectList(Model.ConsultorDao, "FuncionarioID", "Nome"), "Consultor", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label>Cliente</label>
                    <div class="row">
                        <div class="col-xs-10 col-lg-10">
                            <input id="txtCliente" name="txtCliente" type="text" class="form-control" placeholder="CPF/CNPJ do cliente (Mínimo de 3 letras)" disabled="disabled" />
                            <input type="hidden" name="ClienteID" id="ClienteID" />
                        </div>
                        <div class="col-xs-2 col-lg-2">
                            <a href="@Url.Action("Cadastro", "Cliente")" target="_blank"><i class="glyphicon glyphicon-plus" title="Cadastrar cliente" style="vertical-align: bottom"></i></a>
                        </div>
                    </div>
                </div>
                @*@{
                    if (lojaDao.LojaID <= 0)
                    {*@
                        <div class="form-group">
                            <label>Loja de Origem</label>
                            @Html.DropDownListFor(x => x.LojaDao.FirstOrDefault().LojaID, new SelectList(Model.LojaDao, "LojaID", "NomeFantasia"), "Loja de origem dos produtos", new { @class = "form-control", @id = "LojaOrigemID" })
                        </div>
                    @*}
                }*@
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    <label>Loja de Saída</label>
                    @Html.DropDownListFor(x => x.LojaSaidaDao.FirstOrDefault().LojaID, new SelectList(Model.LojaSaidaDao, "LojaID", "NomeFantasia"), "Loja de saída dos produtos", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label>Status do pedido</label>
                    @Html.DropDownListFor(x => x.PedidoStatusDao.FirstOrDefault().PedidoStatusID, new SelectList(Model.PedidoStatusDao, "PedidoStatusID", "Descricao"), "Status do pedido", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label>Valor do frete</label>
                    @Html.TextBoxFor(x => x.ValorFrete, new { @class = "form-control valor text-right", @placeholder = "Valor do frete (Opcional)" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                <div class="col-xs-6 col-lg-6">
                    <h4>Produtos</h4>
                </div>
                <div class="col-xs-6 col-lg-6 text-right">
                    <i id="btnAdicionarProduto" class="glyphicon glyphicon-plus" style="color: #5cb85c; font-size: 20px; cursor: pointer" title="Adicionar Produto"></i>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="table-responsive">
                        <table id="tbProduto" class="table table-striped table-responsive table-condensed">
                            <thead>
                                <tr>
                                    <td class="text-left" style="width: 15%"><b>Produto Entrada</b></td>
                                    <td></td>
                                    <td class="text-center" style="width: 40px"><b>Qtd</b></td>
                                    <td></td>
                                    <td class="text-center" style="width: 7.5%"><b>Preço</b></td>
                                    <td class="text-center" style="width: 7.5%"><b>Entrega</b></td>
                                    <td class="text-left" style="width: 25%"><b>Produto Saída</b></td>
                                    <td></td>
                                    <td class="text-center" style="width: 7.5%"><b>Número</b></td>
                                    <td class="text-center" style="width: 5%"><b>Qtd</b></td>
                                    <td></td>
                                    <td class="text-center" style="width: 7.5%"><b>Preço</b></td>
                                    <td class="text-center" style="width: 10%"><b>Entrega</b></td>
                                    <td class="text-center" style="width: 5%"><b>Ação</b></td>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <div style="margin-top: 10px; margin-bottom: 10px">
                        <div class="col-lg-12" style="font-size: 17px; padding: 0">
                            <div class="col-xs-12 col-lg-3 text-center">
                                Total Entrada: <span style="color: #808080">R$ </span><label id="lblTotalEntrada" style="color: #808080">0,00</label>
                            </div>
                            <div class="col-xs-12 col-lg-3 text-center">
                                <a href="#" data-toggle="modal" data-target="#modaldesconto">Desconto Autorizado</a>: <span style="color: darkorange">R$ </span><label id="lblTotalDesconto" style="color: darkorange;">0,00</label>
                            </div>
                            <div class="col-xs-12 col-lg-3 text-center">
                                Total Saída: <span style="color: #808080">R$ </span><label id="lblTotalSaida" style="color: #808080">0,00</label>
                            </div>
                            <div class="col-xs-12 col-lg-3 text-center">
                                Diferença a Pagar: <span style="color: seagreen">R$ </span><label id="lblTotalAPagar" style="color: seagreen">0,00</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                <div class="col-lg-12">
                    <h4>Pagamentos</h4>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    @Html.DropDownListFor(x => x.TipoPagamentoDao.FirstOrDefault().TipoPagamentoID, new SelectList(Model.TipoPagamentoDao, "TipoPagamentoID", "Descricao"), "Tipo de pagamento", new { @class = "form-control" })
                    <div class="table-responsive">
                        <table id="tbTipoPagamento" class="table table-striped table-responsive table-condensed">
                            <thead>
                                <tr>
                                    <td></td>
                                    <td class="text-left" style="width: 30%"><b>Descrição</b></td>
                                    <td class="text-center" style="width: 10%"><b>Parcelas</b></td>
                                    <td class="text-center" style="width: 30%"><b>CV</b></td>
                                    <td class="text-center" style="width: 20%"><b>Valor Pago</b></td>
                                    <td class="text-center" style="width: 10%"><b>Ação</b></td>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <h4 class="text-right">Total Pago: <span style="color: seagreen">R$ </span><label id="lblTotalPago" style="color: seagreen">0,00</label></h4>
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.TextAreaFor(x => x.Observacao, 5, 10, new { @class = "form-control", @placeholder = "Observação (Opcional)" })
        </div>
        <div class="form-group">
            <button id="btnCadastrarPedido" type="button" class="btn btn-success">Cadastrar</button>
            <button id="btnLista" type="button" class="btn btn-info" onclick="window.location.href='@Url.Action("Lista", "Pedido")'">Lista de Pedidos Cadastrados</button>
        </div>
    </form>
</div>
@Html.Partial("_ModalPedidoDesconto")
@Html.Partial("_ModalProdutoPreco")